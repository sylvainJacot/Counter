{"ast":null,"code":"var _jsxFileName = \"/Users/sylv/Desktop/Work/Jacot Studio/jacotstudio2020/src/components/04 Organisms/navproject/navprojects.js\";\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport throttle from 'lodash.throttle';\nimport { useRouteMatch } from \"react-router-dom\";\nimport { colorsRoles } from \"../../01 Atoms/colors\";\nimport { UIUXProjects } from \"../../01 Atoms/Data\";\nimport NavProjectItem from \"../navproject/navprojectitem\";\nconst Box = {\n  width: \"100%\",\n  height: \"100%\"\n};\n\nconst NavProjects = () => {\n  const [bgColor, setbgColor] = useState(\"\");\n  const [YPos, setYPos] = useState(0);\n  const myRef = useRef(); // Our hook\n\n  const useDebounce = (value, delay) => {\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value);\n    useEffect(() => {\n      // Set debouncedValue to value (passed in) after the specified delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay); // Return a cleanup function that will be called every time ...\n      // ... useEffect is re-called. useEffect will only be re-called ...\n      // ... if value changes (see the inputs array below).\n      // This is how we prevent debouncedValue from changing if value is ...\n      // ... changed within the delay period. Timeout gets cleared and restarted.\n      // To put it in context, if the user is typing within our app's ...\n      // ... search box, we don't want the debouncedValue to update until ...\n      // ... they've stopped typing for more than 500ms.\n\n      return () => {\n        clearTimeout(handler);\n      };\n    }, // Only re-call effect if value changes\n    // You could also add the \"delay\" var to inputs array if you ...\n    // ... need to be able to change that dynamically.\n    [value]);\n    return debouncedValue;\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  });\n\n  const handleScroll = () => {\n    let lastScrollY = window.pageYOffset + 320;\n    let lastScrollYDesktop = lastScrollY + 160;\n    let ref = myRef.current;\n    let refTop = ref.offsetTop;\n    let MediaQueryDesktop = window.matchMedia(\"(max-width: 1024px)\");\n    const NavProjectItemHeightDesktop = 880;\n    const NavProjectItemHeightMobile = 640;\n    const Bg1 = colorsRoles.Brand01;\n    const Bg2 = colorsRoles.Brand02;\n    const Bg3 = colorsRoles.Brand03;\n    const Bg4 = colorsRoles.Sketch;\n    setYPos({\n      YPos: lastScrollY\n    });\n    console.log(lastScrollY);\n    console.log(refTop);\n\n    if (MediaQueryDesktop.matches) {\n      if (lastScrollY >= 0) {\n        window.requestAnimationFrame(() => {\n          setbgColor(\"none\");\n        });\n      }\n\n      if (lastScrollY >= refTop) {\n        window.requestAnimationFrame(() => {\n          setbgColor(Bg1);\n        });\n      }\n\n      if (lastScrollY >= refTop + NavProjectItemHeightMobile) {\n        window.requestAnimationFrame(() => {\n          setbgColor(Bg2);\n        });\n      }\n\n      if (lastScrollY >= refTop + NavProjectItemHeightMobile * 2) {\n        window.requestAnimationFrame(() => {\n          setbgColor(Bg3);\n        });\n      }\n\n      if (lastScrollY >= refTop + NavProjectItemHeightMobile * 3) {\n        window.requestAnimationFrame(() => {\n          setbgColor(Bg4);\n        });\n      }\n    } else {\n      if (lastScrollYDesktop >= 0) {\n        window.requestAnimationFrame(() => {\n          setbgColor(\"none\");\n        });\n      }\n\n      if (lastScrollYDesktop >= refTop) {\n        window.requestAnimationFrame(() => {\n          setbgColor(Bg1);\n        });\n      }\n\n      if (lastScrollYDesktop >= refTop + NavProjectItemHeightDesktop) {\n        window.requestAnimationFrame(() => {\n          setbgColor(Bg2);\n        });\n      }\n\n      if (lastScrollYDesktop >= refTop + NavProjectItemHeightDesktop * 2) {\n        window.requestAnimationFrame(() => {\n          setbgColor(Bg3);\n        });\n      }\n\n      if (lastScrollYDesktop >= refTop + NavProjectItemHeightDesktop * 3) {\n        window.requestAnimationFrame(() => {\n          setbgColor(Bg4);\n        });\n      }\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    style: Box,\n    ref: myRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, UIUXProjects.map(project => React.createElement(NavProjectItem, {\n    bgColor: bgColor,\n    pathName: \"/\",\n    title: project.title,\n    description: project.description,\n    backgroundpicture: project.backgroundpicture,\n    foregroundpicture: project.foregroundpicture,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }))));\n};\n\nexport default NavProjects;","map":{"version":3,"sources":["/Users/sylv/Desktop/Work/Jacot Studio/jacotstudio2020/src/components/04 Organisms/navproject/navprojects.js"],"names":["React","useState","useEffect","useRef","useCallback","throttle","useRouteMatch","colorsRoles","UIUXProjects","NavProjectItem","Box","width","height","NavProjects","bgColor","setbgColor","YPos","setYPos","myRef","useDebounce","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","window","addEventListener","handleScroll","removeEventListener","lastScrollY","pageYOffset","lastScrollYDesktop","ref","current","refTop","offsetTop","MediaQueryDesktop","matchMedia","NavProjectItemHeightDesktop","NavProjectItemHeightMobile","Bg1","Brand01","Bg2","Brand02","Bg3","Brand03","Bg4","Sketch","console","log","matches","requestAnimationFrame","map","project","title","description","backgroundpicture","foregroundpicture"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,MAApC,EAA4CC,WAA5C,QAA8D,OAA9D;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,SAAQC,aAAR,QAA4B,kBAA5B;AAGA,SAAQC,WAAR,QAA0B,uBAA1B;AAEA,SAAQC,YAAR,QAA2B,qBAA3B;AAEA,OAAOC,cAAP,MAA2B,8BAA3B;AAEA,MAAMC,GAAG,GAAG;AACRC,EAAAA,KAAK,EAAE,MADC;AAERC,EAAAA,MAAM,EAAE;AAFA,CAAZ;;AAKA,MAAMC,WAAW,GAAG,MAAM;AAEtB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACe,IAAD,EAAOC,OAAP,IAAkBhB,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAMiB,KAAK,GAAGf,MAAM,EAApB,CAJsB,CAMtB;;AACA,QAAMgB,WAAW,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAiB;AACjC;AACA,UAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCtB,QAAQ,CAACmB,KAAD,CAApD;AAEAlB,IAAAA,SAAS,CACL,MAAM;AACF;AACA,YAAMsB,OAAO,GAAGC,UAAU,CAAC,MAAM;AAC7BF,QAAAA,iBAAiB,CAACH,KAAD,CAAjB;AACH,OAFyB,EAEvBC,KAFuB,CAA1B,CAFE,CAMF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,aAAO,MAAM;AACTK,QAAAA,YAAY,CAACF,OAAD,CAAZ;AACH,OAFD;AAGH,KAlBI,EAmBL;AACA;AACA;AACA,KAACJ,KAAD,CAtBK,CAAT;AAyBA,WAAOE,cAAP;AACH,GA9BD;;AAiCApB,EAAAA,SAAS,CAAC,MAAM;AACZyB,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCC,YAAlC;AAEA,WAAO,MAAM;AACTF,MAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAoCD,YAApC;AACH,KAFD;AAGH,GANQ,CAAT;;AASA,QAAMA,YAAY,GAAG,MAAM;AAEvB,QAAIE,WAAW,GAAGJ,MAAM,CAACK,WAAP,GAAqB,GAAvC;AACA,QAAIC,kBAAkB,GAAGF,WAAW,GAAG,GAAvC;AACA,QAAIG,GAAG,GAAGhB,KAAK,CAACiB,OAAhB;AACA,QAAIC,MAAM,GAAGF,GAAG,CAACG,SAAjB;AAEA,QAAIC,iBAAiB,GAAGX,MAAM,CAACY,UAAP,CAAkB,qBAAlB,CAAxB;AAEA,UAAMC,2BAA2B,GAAG,GAApC;AACA,UAAMC,0BAA0B,GAAG,GAAnC;AAEA,UAAMC,GAAG,GAAGnC,WAAW,CAACoC,OAAxB;AACA,UAAMC,GAAG,GAAGrC,WAAW,CAACsC,OAAxB;AACA,UAAMC,GAAG,GAAGvC,WAAW,CAACwC,OAAxB;AACA,UAAMC,GAAG,GAAGzC,WAAW,CAAC0C,MAAxB;AAEAhC,IAAAA,OAAO,CAAC;AAACD,MAAAA,IAAI,EAACe;AAAN,KAAD,CAAP;AACAmB,IAAAA,OAAO,CAACC,GAAR,CAAYpB,WAAZ;AACAmB,IAAAA,OAAO,CAACC,GAAR,CAAYf,MAAZ;;AAGA,QAAIE,iBAAiB,CAACc,OAAtB,EAA+B;AAE/B,UAAIrB,WAAW,IAAI,CAAnB,EAAsB;AAClBJ,QAAAA,MAAM,CAAC0B,qBAAP,CAA6B,MAAM;AAC/BtC,UAAAA,UAAU,CAAC,MAAD,CAAV;AACH,SAFD;AAGH;;AAED,UAAIgB,WAAW,IAAIK,MAAnB,EAA2B;AACvBT,QAAAA,MAAM,CAAC0B,qBAAP,CAA6B,MAAM;AAC/BtC,UAAAA,UAAU,CAAC2B,GAAD,CAAV;AACH,SAFD;AAIH;;AACD,UAAIX,WAAW,IAAIK,MAAM,GAAGK,0BAA5B,EAAwD;AACpDd,QAAAA,MAAM,CAAC0B,qBAAP,CAA6B,MAAM;AAC/BtC,UAAAA,UAAU,CAAC6B,GAAD,CAAV;AACH,SAFD;AAIH;;AACG,UAAIb,WAAW,IAAIK,MAAM,GAAGK,0BAA0B,GAAG,CAAzD,EAA4D;AACxDd,QAAAA,MAAM,CAAC0B,qBAAP,CAA6B,MAAM;AAC/BtC,UAAAA,UAAU,CAAC+B,GAAD,CAAV;AACH,SAFD;AAIH;;AACD,UAAIf,WAAW,IAAIK,MAAM,GAAGK,0BAA0B,GAAG,CAAzD,EAA4D;AACxDd,QAAAA,MAAM,CAAC0B,qBAAP,CAA6B,MAAM;AAC/BtC,UAAAA,UAAU,CAACiC,GAAD,CAAV;AACH,SAFD;AAIH;AAGJ,KAlCD,MAmCK;AACD,UAAIf,kBAAkB,IAAI,CAA1B,EAA6B;AACzBN,QAAAA,MAAM,CAAC0B,qBAAP,CAA6B,MAAM;AAC/BtC,UAAAA,UAAU,CAAC,MAAD,CAAV;AACH,SAFD;AAGH;;AAED,UAAIkB,kBAAkB,IAAIG,MAA1B,EAAkC;AAC9BT,QAAAA,MAAM,CAAC0B,qBAAP,CAA6B,MAAM;AAC/BtC,UAAAA,UAAU,CAAC2B,GAAD,CAAV;AACH,SAFD;AAIH;;AACD,UAAIT,kBAAkB,IAAIG,MAAM,GAAGI,2BAAnC,EAAgE;AAC5Db,QAAAA,MAAM,CAAC0B,qBAAP,CAA6B,MAAM;AAC/BtC,UAAAA,UAAU,CAAC6B,GAAD,CAAV;AACH,SAFD;AAIH;;AACD,UAAIX,kBAAkB,IAAIG,MAAM,GAAGI,2BAA2B,GAAG,CAAjE,EAAoE;AAChEb,QAAAA,MAAM,CAAC0B,qBAAP,CAA6B,MAAM;AAC/BtC,UAAAA,UAAU,CAAC+B,GAAD,CAAV;AACH,SAFD;AAIH;;AACD,UAAIb,kBAAkB,IAAIG,MAAM,GAAGI,2BAA2B,GAAG,CAAjE,EAAoE;AAChEb,QAAAA,MAAM,CAAC0B,qBAAP,CAA6B,MAAM;AAC/BtC,UAAAA,UAAU,CAACiC,GAAD,CAAV;AACH,SAFD;AAIH;AAEJ;AAEJ,GA3FD;;AA+FI,SACI,0CACI;AAAK,IAAA,KAAK,EAAEtC,GAAZ;AAAiB,IAAA,GAAG,EAAEQ,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGQV,YAAY,CAAC8C,GAAb,CAAkBC,OAAD,IAEjB,oBAAC,cAAD;AAEA,IAAA,OAAO,EAAEzC,OAFT;AAGA,IAAA,QAAQ,EAAE,GAHV;AAIA,IAAA,KAAK,EAAEyC,OAAO,CAACC,KAJf;AAKA,IAAA,WAAW,EAAED,OAAO,CAACE,WALrB;AAMA,IAAA,iBAAiB,EAAEF,OAAO,CAACG,iBAN3B;AAOA,IAAA,iBAAiB,EAAEH,OAAO,CAACI,iBAP3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,CAHR,CADJ,CADJ;AA0BP,CA1KD;;AA4KA,eAAe9C,WAAf","sourcesContent":["import React, {useState, useEffect, useRef, useCallback} from \"react\";\nimport throttle from 'lodash.throttle';\nimport {useRouteMatch} from \"react-router-dom\";\n\n\nimport {colorsRoles} from \"../../01 Atoms/colors\";\n\nimport {UIUXProjects} from \"../../01 Atoms/Data\";\n\nimport NavProjectItem from \"../navproject/navprojectitem\";\n\nconst Box = {\n    width: \"100%\",\n    height: \"100%\",\n};\n\nconst NavProjects = () => {\n\n    const [bgColor, setbgColor] = useState(\"\");\n    const [YPos, setYPos] = useState(0);\n    const myRef = useRef();\n\n    // Our hook\n    const useDebounce = (value, delay) =>{\n        // State and setters for debounced value\n        const [debouncedValue, setDebouncedValue] = useState(value);\n\n        useEffect(\n            () => {\n                // Set debouncedValue to value (passed in) after the specified delay\n                const handler = setTimeout(() => {\n                    setDebouncedValue(value);\n                }, delay);\n\n                // Return a cleanup function that will be called every time ...\n                // ... useEffect is re-called. useEffect will only be re-called ...\n                // ... if value changes (see the inputs array below).\n                // This is how we prevent debouncedValue from changing if value is ...\n                // ... changed within the delay period. Timeout gets cleared and restarted.\n                // To put it in context, if the user is typing within our app's ...\n                // ... search box, we don't want the debouncedValue to update until ...\n                // ... they've stopped typing for more than 500ms.\n                return () => {\n                    clearTimeout(handler);\n                };\n            },\n            // Only re-call effect if value changes\n            // You could also add the \"delay\" var to inputs array if you ...\n            // ... need to be able to change that dynamically.\n            [value]\n        );\n\n        return debouncedValue;\n    }\n\n\n    useEffect(() => {\n        window.addEventListener('scroll', handleScroll);\n\n        return () => {\n            window.removeEventListener('scroll',handleScroll);\n        }\n    })\n\n\n    const handleScroll = () => {\n\n        let lastScrollY = window.pageYOffset + 320;\n        let lastScrollYDesktop = lastScrollY + 160;\n        let ref = myRef.current;\n        let refTop = ref.offsetTop;\n\n        let MediaQueryDesktop = window.matchMedia(\"(max-width: 1024px)\")\n\n        const NavProjectItemHeightDesktop = 880;\n        const NavProjectItemHeightMobile = 640;\n\n        const Bg1 = colorsRoles.Brand01;\n        const Bg2 = colorsRoles.Brand02;\n        const Bg3 = colorsRoles.Brand03;\n        const Bg4 = colorsRoles.Sketch;\n\n        setYPos({YPos:lastScrollY});\n        console.log(lastScrollY);\n        console.log(refTop);\n\n\n        if (MediaQueryDesktop.matches) {\n\n        if (lastScrollY >= 0) {\n            window.requestAnimationFrame(() => {\n                setbgColor(\"none\")\n            });\n        }\n\n        if (lastScrollY >= refTop) {\n            window.requestAnimationFrame(() => {\n                setbgColor(Bg1)\n            });\n\n        }\n        if (lastScrollY >= refTop + NavProjectItemHeightMobile) {\n            window.requestAnimationFrame(() => {\n                setbgColor(Bg2)\n            });\n\n        }\n            if (lastScrollY >= refTop + NavProjectItemHeightMobile * 2) {\n                window.requestAnimationFrame(() => {\n                    setbgColor(Bg3)\n                });\n\n            }\n            if (lastScrollY >= refTop + NavProjectItemHeightMobile * 3) {\n                window.requestAnimationFrame(() => {\n                    setbgColor(Bg4)\n                });\n\n            }\n\n\n        }\n        else {\n            if (lastScrollYDesktop >= 0) {\n                window.requestAnimationFrame(() => {\n                    setbgColor(\"none\")\n                });\n            }\n\n            if (lastScrollYDesktop >= refTop) {\n                window.requestAnimationFrame(() => {\n                    setbgColor(Bg1)\n                });\n\n            }\n            if (lastScrollYDesktop >= refTop + NavProjectItemHeightDesktop) {\n                window.requestAnimationFrame(() => {\n                    setbgColor(Bg2)\n                });\n\n            }\n            if (lastScrollYDesktop >= refTop + NavProjectItemHeightDesktop * 2) {\n                window.requestAnimationFrame(() => {\n                    setbgColor(Bg3)\n                });\n\n            }\n            if (lastScrollYDesktop >= refTop + NavProjectItemHeightDesktop * 3) {\n                window.requestAnimationFrame(() => {\n                    setbgColor(Bg4)\n                });\n\n            }\n\n        }\n\n    }\n\n\n\n        return (\n            <>\n                <div style={Box} ref={myRef}>\n\n                    {\n                        UIUXProjects.map((project) =>\n\n                        <NavProjectItem\n\n                        bgColor={bgColor}\n                        pathName={\"/\"}\n                        title={project.title}\n                        description={project.description}\n                        backgroundpicture={project.backgroundpicture}\n                        foregroundpicture={project.foregroundpicture}\n\n                        />\n\n                        )\n                    }\n\n                </div>\n\n            </>\n        )\n\n}\n\nexport default NavProjects;"]},"metadata":{},"sourceType":"module"}
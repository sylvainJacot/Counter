{"ast":null,"code":"import { useState, useEffect, useRef } from 'react';\nexport default function useDebounce(value, delay) {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(() => {\n    // Update debounced value after delay\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay); // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay] // Only re-call effect if value or delay changes\n  );\n  return debouncedValue;\n}","map":{"version":3,"sources":["/Users/sylv/Desktop/Work/Jacot Studio/jacotstudio2020/src/components/Hooks/useDebounce.js"],"names":["useState","useEffect","useRef","useDebounce","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AAEA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmC;AAC9C;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCP,QAAQ,CAACI,KAAD,CAApD;AAEAH,EAAAA,SAAS,CACL,MAAM;AACF;AACA,UAAMO,OAAO,GAAGC,UAAU,CAAC,MAAM;AAC7BF,MAAAA,iBAAiB,CAACH,KAAD,CAAjB;AACH,KAFyB,EAEvBC,KAFuB,CAA1B,CAFE,CAMF;AACA;AACA;;AACA,WAAO,MAAM;AACTK,MAAAA,YAAY,CAACF,OAAD,CAAZ;AACH,KAFD;AAGH,GAbI,EAcL,CAACJ,KAAD,EAAQC,KAAR,CAdK,CAcU;AAdV,GAAT;AAiBA,SAAOC,cAAP;AACH","sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\nexport default function useDebounce(value, delay) {\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(\n        () => {\n            // Update debounced value after delay\n            const handler = setTimeout(() => {\n                setDebouncedValue(value);\n            }, delay);\n\n            // Cancel the timeout if value changes (also on delay change or unmount)\n            // This is how we prevent debounced value from updating if value is changed ...\n            // .. within the delay period. Timeout gets cleared and restarted.\n            return () => {\n                clearTimeout(handler);\n            };\n        },\n        [value, delay] // Only re-call effect if value or delay changes\n    );\n\n    return debouncedValue;\n}\n"]},"metadata":{},"sourceType":"module"}